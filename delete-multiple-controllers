pipeline {
  agent {
    kubernetes {
      label 'kubectl'
      yaml """
kind: Pod
metadata:
  name: kubectl
spec:
  serviceAccountName: cjoc
  containers:
  - name: kubectl
    image: gcr.io/cloud-builders/kubectl
    resources:
      requests:
        memory: "500Mi"
    command:
    - cat
    tty: true 
      """
    }
  }
  options { 
    buildDiscarder(logRotator(numToKeepStr: '10'))
  }
  stages {
    stage('Delete Controllers') {
      steps {
        echo "controllerNames: ${controllerNames}"
        sh "curl -O http://teams-ops/teams-ops/jnlpJars/jenkins-cli.jar"
        script {
          String[] controllersList = controllerNames.split(',')       
          def labels = controllersList.join(',teams-')
          labels = "teams-${labels}"
          echo "labels: ${labels}"
          controllersList.each {
            withCredentials([usernamePassword(credentialsId: 'admin-cli-token', usernameVariable: 'JENKINS_CLI_USR', passwordVariable: 'JENKINS_CLI_PSW')]) {
              try {
                sh """
                    alias cli='java -jar jenkins-cli.jar -s http://cjoc/cjoc/ -auth $JENKINS_CLI_USR:$JENKINS_CLI_PSW'
                    cli delete-job "teams/$it"
                """
              } catch(e) {
                echo e.toString()
              }
            }
            container('kubectl') {
              sh("kubectl exec --namespace cloudbees-core cjoc-0 -- rm -rf /var/jenkins_home/jcasc-bundles-store/$it || true")
            }
          }
          container('kubectl') {
            sh("kubectl -n cloudbees-core delete pod -l 'cloudbees.com/master in (${labels})' --now")
            sh("kubectl -n cloudbees-core delete statefulset,pod,pvc,ingress,service,deployment -l 'tenant in (${labels})' --now")
          }
        }
      }
    }
  }
}
